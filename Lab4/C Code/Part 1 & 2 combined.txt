/*Raj Lavingia
Lab_4_Required Elements and supplemental elements
Date :- 04.14.2018
*/

#include <at89c51ed2.h>  //also includes 8052.h and 8051.h
#include <mcs51/8051.h> //8051
#include <stdlib.h> //standard library
#include <stdio.h> //standard input output
#include <string.h> //string
#include<stdint.h>
#include <math.h>

#define address_byte 0x70
#define address_byte2 0x71
#define SDA_BUS P2_1
#define SCL_BUS P2_0



//Address and Logic from SPLD code
volatile xdata unsigned char *lcd_instruction_write = 0x8000;
volatile xdata unsigned char *lcd_instruction_read = 0xB000;
volatile xdata unsigned char *lcd_data_write = 0xA000;
volatile xdata unsigned char *lcd_data_read = 0x9000; // 0.02171559 1.90011088



char character; //Character to be used for LCD write
// Defined characters for use in program
unsigned char a,b,c,d,e,f,g,h,i,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,j,k;
char command;
char *size;

void delay1()
{
       unsigned char i,j;
        for(i=0;i<255;i++)
        {
            for(j=0;j<255;j++)
            {
            }
        }

}
//initialisation of serial port
void init_hardware()
{
    TMOD=0x20; //use Timer 1, mode 2
    TH1= 0xFD ; // 9600 baud rate
    SCON=0x50; //SCON initialisation
    TR1=1;   //Start the Timer
    TI=1; //Set TI flag to 1
}



void timer1()
{
    TMOD |= 0x01;
    TCON |= 0X11;
    TH0 = 0X4B;
    TL0 = 0XFD; 
    IE = 0X82;
   
    }

//Function for Polling
void lcdbusywait()
{
    while(*lcd_instruction_read & 0x80);
}

//get a character from user
char getchar ()
{
    while (RI == 0); // wait for character to be received, spin on RI
	RI = 0;			// clear RI flag
	return SBUF;  	// return character from SBUF
}


// print a character
void putchar (char c)
{
    while (TI == 0); // wait for TX ready, spin on TI
    SBUF = c;  	// load serial port with transmit value
   	TI = 0;  	// clear TI flag
}                         //shift back to DDRAM location 0


//print a string
void putstr (char *p)
{
	int i = 0;
	while (*(p+i)!='\0') //output characters until NULL found
    {
		putchar(*(p+i));
		i++;
	}

}

//Delay counting


//Initialisation of lcd
void lcdinit()
{

     delay1();
     *lcd_instruction_write = 0x30; //unlock command


     delay1();
     *lcd_instruction_write = 0x30; //unlock command

     delay1();
    *lcd_instruction_write = 0x30; //unlock command


     lcdbusywait();
    *lcd_instruction_write = 0x38; //Function set command


     lcdbusywait();
     *lcd_instruction_write = 0x08; // Turn the display off


     lcdbusywait();
     *lcd_instruction_write = 0x0C; // Turn the display On

     lcdbusywait();
     *lcd_instruction_write = 0x06; // Entry Mode Set

     lcdbusywait();
    *lcd_instruction_write = 0x01; // Clear the screen and send cursor home

    lcdbusywait();
    *lcd_instruction_write = 0x0E; // Cursor On

    lcdbusywait();
    *lcd_instruction_write = 0x80; // DDram address 0,0 position


}

//go to address of lcd
void lcdgotoaddr(unsigned char address)
{
    lcdbusywait();
    *lcd_instruction_write = (0x80 | address); //if 0x85 then 0x80 or with 0x85 you get 0x85
}




//Function for LCD write
void lcdwrite(int dat)
{
    lcdbusywait();
   *lcd_data_write = dat;

}

unsigned int getstr(){
        //char *s;
        int integer = 0;       //initialize integer
        char first_time = 1;   //The first value show....
        char c = 0x30;         //0 ascii = 0x30 in ascii

        while (c!= '\r') //run until return is pressed
        {
            if((c > 0x29) && (c < 0x40))  // only except integers between 0 and 9
            {
                integer = (integer * 10) + ((int) c - 0x30);  //mult by ten...subtract 0 to turn to digit.

                if(first_time == 0)  //if the first time is 0 putchar(c) but it is 1.
                {
                    putchar(c);
                }
                else
                    first_time = 0; //

            }
            //be able to delete
            else if(c == 0x08)
            {
                //printf_tiny("hello");
                integer = integer / 10;
                putchar('\b');  //you can actually  do putchar('\b') to delete
                putchar(' ');  //show space
                putchar('\b'); //show backspace
            }
            c = getchar();  //get another character
        }
        return integer;
}


//delay given between i2c functions
void delay2(unsigned int d)
{
unsigned int i;
for(i=0;i<d;i++);
{
    ;
}
}

//initialisation of i2c
void initialisation()
{
    SDA_BUS = 1;
    SCL_BUS = 1;
}


//delay for clock
void delay3()
{
    unsigned char d1 =0;
        for(d1=0;d1<25;d1++)
        {
            ;
        }
}

//start i2c
void start()
{
    //SDA should be high to low and SCL should be always high when there is a start command
    SDA_BUS = 1;
    SCL_BUS = 1;
    delay3();
    SDA_BUS = 0;
    delay3();
}

//Restart i2c
void restart()
{
    //SCL should go fro 0 to 1 since it restarts itself and SDA should go from high to low
SCL_BUS  = 0;
delay3();
SDA_BUS  = 1;
delay3();
SCL_BUS  = 1;
delay3();
SDA_BUS  = 0;
delay3();
}

//stop i2c
void stop()
{
    //SDA should be low to high while SCL should be High to determine a stop condition
    SCL_BUS = 0;
    delay3();
    SDA_BUS = 0;
    delay3();
    SCL_BUS = 1;
    delay3();
    SDA_BUS = 1;
    delay3();
}

//ack bit
void ack()
{
    //SDA line has to be pulled down after the acknowledgement of the byte
    SCL_BUS = 0;
    delay3();
    SDA_BUS = 0;
    delay3();
    SCL_BUS = 1;
    delay3();
}
//no ack
void noack()
{
    //Since SCL is always 1 there is no acknowledgement, for ack to happen SCL must go low once and then go high
    SCL_BUS = 1;
    delay3();
    SDA_BUS = 0;
    delay3();
    SCL_BUS = 1;
    delay3();
}

//write i2c
bit write(unsigned char byte)
{
    unsigned char i;
    for(i=0; i<8; i++)
    {
        SCL_BUS = 0;
        if((byte<<i) & 0x80)
        {
            SDA_BUS = 1;
        }
        else
        {
            SDA_BUS = 0;
        }
        delay3();
        SCL_BUS = 1;
        delay3();
    }

    //check for an acknowledgement
    SCL_BUS =0;
    SDA_BUS = 1;
    delay3();
    SCL_BUS =1;
    i=SDA_BUS;
    delay3();
    SCL_BUS =0;
    return i; //return the acknolege
}

unsigned char read(void)
{
    unsigned char i;
    unsigned char receive = 0;
    SDA_BUS=1;
    for(i=0;i<8;i++)
    {
        SCL_BUS = 0;
        delay3();
        SCL_BUS = 1;
        delay3();
        receive = receive|(SDA_BUS<<(7-i));
        delay3();
    }
    return receive;
}


//write byte to eeprom
void write_byte_to_eeprom(unsigned int send, unsigned char send1)

{
    start();

    write(address_byte | (send>>7) & 0xfe);
    write((unsigned char)send);
    write(send1);
    stop();

}


//read data byte from eeprom
unsigned char read_byte_from_eeprom(unsigned int send)
{
    unsigned char receive = 0;
    start();
    write(address_byte2 | (send>>7) & 0xfe);
    write((unsigned char)send);
    SCL_BUS=0;
    start();
    write(address_byte | (send>>7) | 1);
    receive = read();
    noack();
    stop();

    return receive;
}

//String Print on LCD
void stringprint(char *str)
{
	int q;
	for(q=0;str[q]!=0;q++)  // print every character of screen
	{
		lcdwrite(str[q]);
	}
}

//clear the screen
void clear()
{
    lcdbusywait();
    *lcd_instruction_write = 0x01; //clear the whole lcd
    lcdbusywait();
    *lcd_instruction_write = 0x02; //curser back to home position
}


//graphical interface
void graph(char r, char c, char *str)  // Define rows and columns and send data accordingly
{
	if (r == 0)
{
    *lcd_instruction_write = ((c & 0x0F)|0x80);
}
else if (r == 1)
{
    *lcd_instruction_write = ((c & 0x0F)|0xC0);
}
	stringprint(str);
}




//Functions for displaying DDRam
void ddram()
{
    unsigned char j;
    *lcd_instruction_write = (0x80);
    for(i=0x80; i<=0x8F ; i++)
    {

    lcdbusywait();
    j = *lcd_data_read;
    lcdbusywait();
    printf_tiny("value at a is %u \n \r", j);
    }

    *lcd_instruction_write = (0xC0);
    for(u=0xC0; u<=0xCF ; u++)
    {
    lcdbusywait();
    l = *lcd_data_read;
    lcdbusywait();
    printf_tiny("value at a is %u \n \r", l);
    }
    *lcd_data_write = (0x90);
    for(n=0x90; n<=0x9F ; n++)
    {
    lcdbusywait();
    m = *lcd_data_read;
    lcdbusywait();
    printf_tiny("value at a is %u \n \r", m);
    }
    *lcd_instruction_write = (0xD0);
    for(x=0xD0; x<=0xDF ; x++)
    {
    lcdbusywait();
    y = *lcd_data_read;
    lcdbusywait();
    printf_tiny("value at a is %u \n \r", y);
    }
}


//Function for displaying CGRAM
void cgram()
{

    lcdbusywait();
    *lcd_instruction_write = 0x40;
    for(l=0; l<64; l++)
    {
        lcdbusywait();
        s = *lcd_data_read;
        printf_tiny("the value of cgram is %d \n \r",s);
    }
}


//Function for CU LOGO
void customlogo()
{

    lcdbusywait();
    *lcd_instruction_write = 0x40 | 0x00;
    lcdbusywait();
    *lcd_data_write = 0x0E; //location 0
    lcdbusywait();
    *lcd_data_write = 0x11;
    lcdbusywait();
    *lcd_data_write = 0x11;
    lcdbusywait();
    *lcd_data_write = 0x16;
    lcdbusywait();
    *lcd_data_write = 0x12;
    lcdbusywait();
    *lcd_data_write = 0x13;
    lcdbusywait();
    *lcd_data_write = 0x13;
    lcdbusywait();
    *lcd_data_write = 0x0E;
    lcdbusywait();
    *lcd_instruction_write = 0x80; //DDRAM
    lcdbusywait();
    *lcd_data_write = 0x00;

    lcdbusywait();
    *lcd_instruction_write = 0x40| 0x08;
    lcdbusywait();
    *lcd_data_write = 0x00; //location 0
    lcdbusywait();
    *lcd_data_write = 0x00;
    lcdbusywait();
    *lcd_data_write = 0x00;
    lcdbusywait();
    *lcd_data_write = 0x06;
    lcdbusywait();
    *lcd_data_write = 0x04;
    lcdbusywait();
    *lcd_data_write = 0x04;
    lcdbusywait();
    *lcd_data_write = 0x04;
    lcdbusywait();
    *lcd_data_write = 0x04;
    lcdbusywait();
    *lcd_instruction_write = 0x81; //DDRAM
    lcdbusywait();
    *lcd_data_write = 0x01;

    lcdbusywait();
    *lcd_instruction_write = 0x40| 0x10;
    lcdbusywait();
    *lcd_data_write = 0x02; //location 0
    lcdbusywait();
    *lcd_data_write = 0x02;
    lcdbusywait();
    *lcd_data_write = 0x01;
    lcdbusywait();
    *lcd_data_write = 0x00;
    lcdbusywait();
    *lcd_data_write = 0x00;
    lcdbusywait();
    *lcd_data_write = 0x00;
    lcdbusywait();
    *lcd_data_write = 0x00;
    lcdbusywait();
    *lcd_data_write = 0x00;
    lcdbusywait();
    *lcd_instruction_write = 0xC0; //DDRAM
    lcdbusywait();
    *lcd_data_write = 0x02;

    lcdbusywait();
    *lcd_instruction_write = 0x40| 0x18;
    lcdbusywait();
    *lcd_data_write = 0x04; //location 0
    lcdbusywait();
    *lcd_data_write = 0x04;
    lcdbusywait();
    *lcd_data_write = 0x18;
    lcdbusywait();
    *lcd_data_write = 0x00;
    lcdbusywait();
    *lcd_data_write = 0x00;
    lcdbusywait();
    *lcd_data_write = 0x00;
    lcdbusywait();
    *lcd_data_write = 0x00;
    lcdbusywait();
    *lcd_data_write = 0x00;
    lcdbusywait();
    *lcd_instruction_write = 0xC1; //DDRAM
    lcdbusywait();
    *lcd_data_write = 0x03;
}

void lcdcreatechar(unsigned char ccode, unsigned char *row_vals)
{
    int i = 0;
    ccode = (unsigned int) ccode * 8;


        lcdbusywait();
        *lcd_instruction_write = (0x40 | ccode);
        lcdbusywait();

     for (i=0; i<8; i++)
     {
        lcdbusywait();
        *lcd_data_write = *(row_vals + i);
        lcdbusywait();
     }

}

void cutsomcharacteruser()
{
unsigned char pos = 0,raj[8] = {32,32,32,32,32,32,32,32};
unsigned int i = 0;

    while(pos == 0)
    {
        printf_tiny("\n \r input position between 1 and 7 \n \r");
        pos = getstr();
        if(pos>=1 && pos<=8 )
        {
            printf_tiny("\n the value you have entered can be considered \n \r");

        }
        else if(pos> 8)
        {
            printf_tiny("\n the value you have entered is not considered, enter a new value \n \r");
            pos = 0;
        }
    }

    printf_tiny("\n enter the value starting from row 1 to row 8 in decimal \n \r ");
    for(i=0; i<8; i++)
    {

        while(raj[i] > 31)
        {
            raj[i] = getstr();

            if(raj[i] < 32)
            {
                printf_tiny(" \n \r");
            }
            else
            {
                printf_tiny("\n please enter a value between 1 and 31 in decimal \n \r");
            }
        }

    }

    lcdcreatechar(pos - 1,  raj);
     *lcd_instruction_write = 0x80;
        lcdbusywait();
        *lcd_data_write = pos-1;


}

void write2()
{
    unsigned char kl
    for(k1=0;k<9;k++)
    {
        SCL_BUS = 0;
        delay2();
        SDA_BUS =1;
        delay2();
        SCL_BUS =1;
        delay2();
        
    }
    ack();
}
void reset2()
{
    start();
    write2();
    start();
    stop();
}

// Function: lcd_getaddr
void timer_isr (void) __interrupt (1)
{

unsigned int m=0,l=0,k=0,j=0,i=0;
unsigned char a[]={0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39};

while(1)
{
for(i=0;i<10;i++)
{
*lcd_instruction_write = 0xDF;
lcdwrite(a[i]);
timer1();

if(i==9)
{
j=j+1;

if(j==10)
{
j=0;
k=k+1;

if(k==6)
{
k=0;
l=l+1;

if(l==9)
{
l=0;
m=m+1;

*lcd_instruction_write = 0xD9;
lcdwrite(a[m]);
}


*lcd_instruction_write = 0xDA;
lcdwrite(a[l]);
}


*lcd_instruction_write = 0xDC;
lcdwrite(a[k]);
}


*lcd_instruction_write = 0xDD;
lcdwrite(a[j]);
}


}
}
}




void main()
{

    uint16_t count = 0;
uint16_t startaddress;
    uint16_t endaddress;
uint16_t j,value;
 uint16_t command1; //data (8-bit)
 uint16_t command2; //address (16-bit but max is going to be 0x7FF which is 2047)
uint16_t command3,command5;
   // lcdbusywait();
   init_hardware();
 init_clock();
   // init_clock();

    // Initialisation of LCD
   //Initialisation of serial port
 //   lcdbusywait();
 lcdbusywait();
    lcdinit();
    lcdbusywait();
while(1)

{

   

printf_tiny (" enter characters from the choice a = print string \n \r, b = go to address and print \n \r , c = (x,y) Coordinates \n \r , d = Clear the screen \n \r ,e = dump ddram \n \r , f = dump cgram \n \r ,g = custom logo \n \r, h = custom character, i= read write i2c \n \r, k =dump with start and end address \n \r r= chart with address and values \n \r m= reset \n \r n= start and stop timer \n \r x=reset clock");
printf_tiny("Enter a character : \n \r ");
command = getchar(); //obtain the character from user
printf_tiny("The character you entered is :  \n \r ");
putchar(command);
if(command == 'a')
{
    lcdbusywait();
  stringprint("Raj");

}
else if (command == 'b')
{
    lcdbusywait();
    //gotoaddress(0x85);
    lcdbusywait();
    stringprint("Lavingia");
}
else if (command == 'c')
{
    graph(1,4,"Esd Lab");
}

else if (command == 'd')
{
    clear();
}
else if(command == 'e')
{
    lcdbusywait();
    ddram();
    lcdbusywait();
}
else if (command == 'f')
{
    lcdbusywait();
    cgram();
    lcdbusywait();
}
else if (command == 'g')
{
    lcdbusywait();
    customlogo();
    lcdbusywait();
}
else if (command == 'h')
{
    lcdbusywait();
    cutsomcharacteruser();
    lcdbusywait();
}
else if (command == 'i')
{
    int count =0 ;
     uint16_t i;
    unsigned char receive= 0;
    uint16_t command2;

    initialisation();



    printf_tiny("enter a value to write to eeprom \n \r");
    command1 = getstr();
    printf_tiny("enter the address between 0 and 2047 \n \r");
    command2 = getstr();

    if(command2 <= 2047)
    {
        printf_tiny("Entered address is correct \n \r");

        //command5 = getstr();

         write_byte_to_eeprom(command2,command1);

    delay3();
    delay3();
    delay3();
    delay3();
    delay3();
    delay3();
    delay3();
    delay3();

    printf_tiny("entered data value is %x \n \r ", command1);


    delay3();
    delay3();
    delay3();
    delay3();
    delay3();
    delay3();
    delay3();
    delay3();

    printf_tiny("enter the address you want to read \n \r");
    command3 = getstr();
    printf_tiny("user entered address is \n \r", command3);
    receive = read_byte_from_eeprom(command3);
    printf_tiny("received data is %x \n \r",receive );





    }

}
else if(command == 'k')
{

    printf_tiny("enter a start address between 0 and 2047 \n \r ");
    startaddress = getstr();
    printf_tiny("user entered start address as %x\n \r", startaddress);
    printf_tiny("Enter a end address between 0 and 2047 \n \r");
    endaddress = getstr();
    printf_tiny("user entered end address as %x \n \r", endaddress);

if(startaddress>=0 && endaddress<=2047)
{

    if(startaddress<=endaddress)
    {
        printf_tiny("hex dump begins \n \r");

     for(j=startaddress;j<endaddress;j++)
    {

        printf_tiny(" %x ", read_byte_from_eeprom(j));
        count++;
        if(count % 16 == 0)
        {
            printf_tiny("\n \r");
        }
    }

    printf_tiny("\n \r");

    }
    else
    {
        printf_tiny("Please enter an end address greater than starting address \n \r");
    }}
else
{
    printf_tiny("enter the value of start address and end address according to above instructions \n \r");
}
}
else if (command == 'r')
{
    uint16_t i;
    for(i = 0; i<=2047;i++)
    {
        printf_tiny("address is %x and value is %x \n \r", i, read_byte_from_eeprom(i));
    }
}
else if (command == 'm')
{
    reset2();
    printf_tiny("\n \r");

}
else if(command == 'n')
{
    if(clock) {
        start = 0;
            }
             else {
                    start = 1;
          }
}
else if (command == 'x')
{
       {
                i= 0;
                j= 0;
                k= 0;
                l=0;
        }
}
}





}

